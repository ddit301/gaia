<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="best.gaia.project.dao.ProjectDao">
	<select id="getProjNoFromIdAndTitle" parameterType="java.util.Map" resultType="Integer">
		select proj_no
		from project 
		    inner join member on (project.mem_no = member.mem_no)
		where proj_title = #{project_title}
		    and mem_id = #{manager_id}
	</select>
	<select id="getProjCount" parameterType="best.gaia.vo.ProjectVO" resultType="int">
		select a+b
		from (
		    select count(*) a
		    from project
		    where proj_title = #{proj_title} and mem_no = #{mem_no}) a,
		    (
		    select count(*) b
		    from forbidden_proj_title
		    where forbidden_proj_title = #{proj_title} ) b
	</select>
	
	<select id="selectProject" parameterType="int" resultType="best.gaia.vo.ProjectVO">
		SELECT
		    proj_no,
		    mem_no,
		    proj_title,
		    proj_cont,
		    to_char(proj_start_date, 'yyyy-mm-dd') as proj_start_date,
		    to_char(proj_est_end_date, 'yyyy-mm-dd') as proj_est_end_date,
		    issue_priority_set,
		    proj_module_set,
		    proj_status
		FROM
		    project
		WHERE PROJ_NO = #{proj_no}
	</select>
	
	<insert id="insertProject" parameterType="best.gaia.vo.ProjectVO">
		<selectKey resultType="int" keyProperty="proj_no" order="BEFORE">
			SELECT PROJ_SEQ.nextval
			FROM DUAL
		</selectKey>
		 INSERT INTO PROJECT (
		    PROJ_NO,
		    MEM_NO,
		    PROJ_TITLE,
		    PROJ_CONT,
		    PROJ_START_DATE
		) VALUES (
		    #{proj_no},
		    #{mem_no,jdbcType=NUMERIC},
		    #{proj_title,jdbcType=VARCHAR},
		    #{proj_cont,jdbcType=VARCHAR},
		    sysdate
		)
	</insert>
	
	<update id="updateProject" parameterType="best.gaia.vo.ProjectVO">
		UPDATE project
		SET
		    mem_no = #{mem_no,jdbcType=NUMERIC}
		    ,proj_title = #{proj_title,jdbcType=VARCHAR}
		    ,proj_cont = #{proj_cont,jdbcType=VARCHAR}             
			,proj_est_end_date = TO_DATE(#{proj_est_end_date,jdbcType=VARCHAR},'YYYY-MM-DD')     
			,issue_priority_set = #{issue_priority_set,jdbcType=NUMERIC}   
			,proj_module_set = #{proj_module_set,jdbcType=NUMERIC}       
			,proj_status = #{proj_status,jdbcType=VARCHAR}          
		WHERE
			proj_no = #{proj_no}
	</update>
	
	<insert id="insertMemberRole" parameterType="best.gaia.vo.MemRoleVO">
		<selectKey resultType="int" keyProperty="mem_role_no" order="BEFORE">
			select nvl(max(mem_role_no),0)+1
			from mem_role
		</selectKey>
		INSERT INTO mem_role (
		    mem_role_no,
		    proj_no,
		    mem_role_nm,
		 	authority
		) VALUES (
		    #{mem_role_no},
		    #{proj_no,jdbcType=NUMERIC},
		    #{mem_role_nm,jdbcType=VARCHAR},
		    #{authority,jdbcType=NUMERIC}
		)
	</insert>
	
	<update id="updateMemberRole" parameterType="best.gaia.vo.MemRoleVO">
		UPDATE mem_role
		SET
		    mem_role_nm = #{mem_role_nm,jdbcType=VARCHAR}
		    ,authority = #{authority,jdbcType=NUMERIC}
		WHERE
		     mem_role_no = #{mem_role_no}
	</update>
	
	<delete id="deleteMemberRole" parameterType="int">
		DELETE FROM mem_role
		WHERE mem_role_no = #{mem_role_no}
	</delete>
	
	<insert id="insertProjMem" parameterType="best.gaia.vo.ProjMemVO">
		INSERT INTO proj_mem (
		    mem_no,
		    proj_no,
		    mem_role_no,
		    proj_join_date,
		    proj_user_nick
		) VALUES (
		    #{mem_no,jdbcType=NUMERIC},
		    #{proj_no,jdbcType=NUMERIC},
		    #{mem_role_no,jdbcType=NUMERIC},
		    sysdate,
		    #{proj_user_nick,jdbcType=VARCHAR}
		)
	</insert>
	
	
	
	
	<select id="getProjectNickNameByMemNo" parameterType="java.util.Map" resultType="String">
		select proj_user_nick
		from proj_mem
		where mem_no = #{mem_no}
			and proj_no = #{proj_no}
	</select>
	
	
	<resultMap type="best.gaia.vo.ProjectVO" id="projectMap" autoMapping="true">
		<id property="proj_no" column="PROJ_NO"/>
		<association property="projectManager" javaType="best.gaia.vo.MemberVO" autoMapping="true">
			<id property="mem_no" column="MEM_NO"/>
		</association>
	</resultMap>
	
	<select id="selectProjectList" parameterType="int" resultMap="projectMap">
		select project.proj_no, proj_title, proj_cont, proj_start_date, proj_est_end_date
		        ,proj_manager.mem_id, mem_nick, mem_pic_file_name
		from project
		    left outer join proj_mem on (project.proj_no = proj_mem.proj_no)
		    left outer join member proj_manager on (project.mem_no = proj_manager.mem_no)
		where proj_mem.mem_no = #{mem_no}
			and proj_status = 0
			and proj_mem.proj_drop_date is null
		order by proj_start_date
	</select>
	
	<select id="selectMemRoleList" parameterType="int" resultType="java.util.Map">
		select mem_role_no, mem_role_nm
		from mem_role
		where proj_no = #{proj_no}
		order by mem_role_no
	</select>
	
	<update id="updateProjectMemberRole" parameterType="best.gaia.vo.ProjMemVO">
		UPDATE proj_mem
		SET
			<if test="mem_role_no != null">
			    mem_role_no = #{mem_role_no}
			</if>
			<if test="proj_user_nick != null">
			   	proj_user_nick = #{proj_user_nick}
			</if>
		WHERE
		        mem_no = #{mem_no}
		    AND proj_no = #{proj_no}
	</update>
	
	<update id="setMemberInactive" parameterType="best.gaia.vo.ProjMemVO">
		UPDATE proj_mem
		SET
		    PROJ_DROP_DATE = sysdate
		WHERE
		        mem_no = #{mem_no}
		    AND proj_no = #{proj_no}	
	</update>
	
	<update id="setMemberActive" parameterType="best.gaia.vo.ProjMemVO">
		UPDATE proj_mem
		SET
		    PROJ_DROP_DATE = null
		WHERE
		        mem_no = #{mem_no}
		    AND proj_no = #{proj_no}	
	</update>
	
	<select id="searchMemberToInvite" parameterType="java.util.Map" resultType="best.gaia.vo.MemberVO">
		with memlist as(
		    select mem_no
		    from proj_mem
		    where proj_no= #{proj_no}
		)
		select distinct mem_no, mem_id, mem_nick, mem_pic_file_name,mem_nm, mem_bio, mem_working_city
		        ,mem_status
		from member
		where mem_no not in (select mem_no from memlist)
		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(keyword)">
		        AND ( instr(LOWER(mem_id) ,LOWER(#{keyword}))>0
		          OR instr(LOWER(mem_nick) ,LOWER(#{keyword}))>0
		          OR instr(LOWER(mem_nm) ,LOWER(#{keyword}))>0
		          OR instr(LOWER(mem_bio) ,LOWER(#{keyword}))>0
		          OR instr(LOWER(mem_working_city) ,LOWER(#{keyword}))>0)
		</if>
		order by mem_no
	</select>
	
	<select id="selectLowestRoleNo" parameterType="int" resultType="int">
		select max(mem_role_no)
		from mem_role
		where proj_no =#{proj_no}
	</select>
	
	<resultMap type="best.gaia.vo.ProjectVO" id="projectMapToManage" autoMapping="true">
		<id property="proj_no" column="PROJ_ID"/>
		<collection property="labelList" ofType="best.gaia.vo.LabelVO" javaType="java.util.List" autoMapping="true">
			<id column="LABEL_NO" property="label_no"/>
		</collection>
		<collection property="roleList" ofType="best.gaia.vo.MemRoleVO" javaType="java.util.List" autoMapping="true">
			<id column="MEM_ROLE_NO" property="mem_role_no"/>
		</collection>
	</resultMap>
	
	<select id="loadProjectForManagement" parameterType="int" resultMap="projectMapToManage">
		select project.proj_no as proj_id, mem_no, proj_title, proj_cont, proj_start_date
		        ,proj_est_end_date, issue_priority_set, proj_module_set, proj_status
		        ,label.label_no, label.label_nm, label.label_color, label.label_icon
		        ,mem_role.mem_role_no, mem_role.mem_role_nm, mem_role.authority
		from project
		    left outer join label on (project.proj_no = label.proj_no)
		    left outer join mem_role on (project.proj_no = mem_role.proj_no)
		where project.proj_no = ${proj_no}
		order by label_no, mem_role_no		
	</select>
	
	<insert id="insertLabel" parameterType="best.gaia.vo.LabelVO">
		<selectKey resultType="int" keyProperty="label_no" order="BEFORE">
			select nvl(max(label_no),0)+1
			from label
		</selectKey>
		INSERT INTO label (
		    label_no,
		    proj_no,
		    label_nm,
		    label_icon,
		    label_color
		) VALUES (
		    #{label_no},
		    #{proj_no,jdbcType=NUMERIC},
		    #{label_nm,jdbcType=VARCHAR},
		    #{label_icon,jdbcType=VARCHAR},
		    #{label_color,jdbcType=VARCHAR}
		)
	</insert>
	
	<delete id="deleteLabel" parameterType="int">
	    DELETE FROM label
		WHERE label_no = #{label_no}
	</delete>
	
	<update id="updateLabel" parameterType="best.gaia.vo.LabelVO">
		UPDATE label
		SET
		    label_nm = #{label_nm}
		    ,label_icon = #{label_icon}
		    ,label_color = #{label_color}
		WHERE
	        label_no = #{label_no}
	</update>
	
	<select id="selectLabelList" parameterType="int">
		select label_no, label_nm, label_icon, label_color
		from label
		where proj_no = #{proj_no}
	</select>
	
	<resultMap type="best.gaia.vo.ProjectVO" id="overviewMap" autoMapping="true">
		<id property="proj_no" column="PROJ_NO"/>
		<association property="projectManager" javaType="best.gaia.vo.MemberVO">
			<id property="mem_no" column="PROJ_MNG_NO"/>
			<result property="mem_nick" column="MNG_NICK"/>
		</association>
		<collection property="memberList" ofType="java.util.Map" javaType="java.util.List">
			<id property="memno" column="MEMBER_NO"></id>
			<result property="nick" column="MEMBER_NICK"/>
			<result property="role" column="MEM_ROLE"/>
		</collection>
	
	</resultMap>
	
	<select id="selectProjectOverview" parameterType="int" resultMap="overviewMap">
		select project.proj_no, proj_title, proj_cont, proj_Start_date, proj_est_end_date, proj_status
		        ,manager.mem_no as PROJ_MNG_NO, manager.proj_user_nick as MNG_NICK
		        ,member.mem_no as MEMBER_NO, member.proj_user_nick as MEMBER_NICK, mem_role.mem_role_nm as MEM_ROLE
		from project
		    inner join proj_mem manager on project.mem_no = manager.mem_no and project.proj_no = manager.proj_no
		    inner join proj_mem member on project.proj_no = member.proj_no
		    inner join mem_role on (member.mem_role_no = mem_role.mem_role_no)
		where project.proj_no = #{mem_no}
				and member.proj_drop_date is null
		order by member.mem_role_no
	
	</select>
	
	<select id="getMemberCountsWithMemRole" parameterType="int" resultType="int">
		select count(*)
		from proj_mem
		where mem_role_no = #{mem_role_no}
	</select>
	
	<select id="getProjMemNumbers" parameterType="int" resultType="int">
		SELECT MEM_NO
		FROM PROJ_MEM
		WHERE PROJ_NO = #{proj_no} and proj_drop_date is null
	</select>
	
	<select id="getProjectAnalytics" parameterType="int" resultType="map">
		with 
		milest as(
		    select count(*) as milestonecount, proj_no
		    from milestone
		    group by proj_no
		)
		,issues as(
		    select count(*) as issuecount, proj_no
		    from issue
		    group by proj_no
		)
		,openissue as(
		    select count(*) as openissue, proj_no
		    from issue
		    where issue_status = 0
		    group by proj_no
		)
		,issuehiscount as (
		    select count(*) as issuehiscount, proj_no
		    from issue_history
		        inner join issue on (issue_history.issue_sid = issue.issue_sid)
		    group by proj_no
		)
		,openmilestone as(
		    select count(*) as openmilestone, proj_no
		    from milestone
		    where milest_status = 0
		    group by proj_no
		)
		,labelcount as(
		    select count(*) as labelcount, proj_no
		    from label
		    group by proj_no
		)
		,rolecount as(
		    select count(*) as rolecount, proj_no
		    from mem_role
		    group by proj_no
		)
		,columncount as (
		    select count(*) as columncount, proj_no
		    from kanban_col
		    group by proj_no
		)
		,cardcount as (
		    select count(*) as cardcount, proj_no
		    from kanban_card
		        inner join kanban_col on (kanban_card.kb_col_no = kanban_col.kb_col_no)
		    group by proj_no
		)
		,newscount as(
		    select count(*) as newscount, proj_no
		    from news
		    group by proj_no
		)
		,newscomcount as(
		    select count(*) as newscomcount, proj_no
		    from news_comment
		        inner join news on (news_comment.news_sid = news.news_sid)
		    group by proj_no
		)
		,wikicount as(
		    select count(*) as wikicount, proj_no
		    from wiki
		    where wiki.parent_wiki is null
		    group by proj_no
		)
		select project.proj_no, project.proj_start_date, project.proj_est_end_date
		        ,nvl(milestonecount,0) as milestonecount
		        ,nvl(issuecount, 0) as issuecount
		        ,nvl(openissue, 0) as openissue
		        ,nvl(openmilestone,0) as openmilestone
		        ,nvl(issuehiscount, 0) as issuehiscount
		        ,nvl(labelcount, 0) as labelcount
		        ,nvl(rolecount, 0) as rolecount
		        ,nvl(columncount, 0) as columncount
		        ,nvl(cardcount, 0) as cardcount
		        ,nvl(newscount, 0) as newscount
		        ,nvl(newscomcount, 0) as newscomcount
		        ,nvl(wikicount, 0) as wikicount
		from project
		        left outer join milest on (project.proj_no = milest.proj_no)
		        left outer join issues on (project.proj_no = issues.proj_no)
		        left outer join openissue on (project.proj_no = openissue.proj_no)
		        left outer join openmilestone on (project.proj_no = openmilestone.proj_no)
		        left outer join issuehiscount on (project.proj_no = issuehiscount.proj_no)
		        left outer join labelcount on (project.proj_no = labelcount.proj_no)
		        left outer join rolecount on (project.proj_no = rolecount.proj_no)
		        left outer join columncount on (project.proj_no = columncount.proj_no)
		        left outer join cardcount on (project.proj_no = cardcount.proj_no)
		        left outer join newscount on (project.proj_no = newscount.proj_no)
		        left outer join newscomcount on (project.proj_no = newscomcount.proj_no)
		        left outer join wikicount on (project.proj_no = wikicount.proj_no)
		where project.proj_no = #{proj_no}
	</select>
	
	<select id="getProjectMemberAnalytics" parameterType="int" resultType="map">
		with 
		milestonecount as(
		    select count(*) as milestonecount, mem_no, proj_no
		    from milestone
		    group by mem_no, proj_no
		)
		,issuecount as (
		    select count(*) as issuecount, mem_no, proj_no
		    from issue
		    group by mem_no, proj_no
		)
		,issuecomcount as(
		    select count(*) as issuecomcount, issue_history.mem_no, proj_no
		    from issue_history
		        inner join issue on (issue_history.issue_sid = issue.issue_sid)
		    where issue_history.issue_his_type = 'RE'
		    group by issue_history.mem_no, proj_no
		)
		,taskcount as(
		    select count(*) as taskcount, issue_assignee.mem_no, proj_no
		    from issue_assignee
		            inner join issue on (issue_assignee.issue_sid = issue.issue_sid)
		    group by issue_assignee.mem_no, proj_no
		)
		,wikicount as(
		    select count(*) as wikicount, mem_no, proj_no
		    from wiki
		    group by mem_no, proj_no
		)
		,newscount as (
		    select count(*) as newscount, mem_no, proj_no
		    from news
		    group by mem_no, proj_no
		)
		,newscomcount as (
		    select count(*) as newscomcount, news_comment.mem_no, proj_no
		    from news_comment
		        inner join news on news_comment.news_sid = news.news_sid
		    group by news_comment.mem_no, proj_no
		)
		select proj_mem.mem_no, proj_join_date, proj_drop_date, proj_user_nick
		        , mem_role_nm
		        , member.mem_pic_file_name
		        , nvl(milestonecount, 0) as milestonecount
		        , nvl(issuecount, 0) as issuecount
		        , nvl(issuecomcount, 0) as issuecomcount
		        , nvl(taskcount, 0) as taskcount
		        , nvl(wikicount, 0) as wikicount
		        , nvl(newscount, 0) as newscount
		        , nvl(newscomcount, 0) as newscomcount
		from proj_mem
		        inner join member on (proj_mem.mem_no = member.mem_no)
		        inner join mem_role on (proj_mem.mem_role_no = mem_role.mem_role_no)
		        left outer join milestonecount on (proj_mem.proj_no = milestonecount.proj_no and proj_mem.mem_no = milestonecount.mem_no)
		        left outer join issuecount on (proj_mem.proj_no = issuecount.proj_no and proj_mem.mem_no = issuecount.mem_no)
		        left outer join issuecomcount on (proj_mem.proj_no = issuecomcount.proj_no and proj_mem.mem_no= issuecomcount.mem_no)
		        left outer join taskcount on (proj_mem.proj_no = taskcount.proj_no and proj_mem.mem_no = taskcount.mem_no)
		        left outer join wikicount on (proj_mem.proj_no = wikicount.proj_no and proj_mem.mem_no = wikicount.mem_no)
		        left outer join newscount on (proj_mem.proj_no = newscount.proj_no and proj_mem.mem_no = newscount.mem_no)
		        left outer join newscomcount on (proj_mem.proj_no = newscomcount.proj_no and proj_mem.mem_no = newscomcount.mem_no)
		where proj_mem.proj_no = #{proj_no}
		order by proj_mem.mem_role_no
	</select>
	
</mapper>






