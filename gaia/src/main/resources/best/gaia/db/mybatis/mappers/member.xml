<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="best.gaia.member.dao.MemberDao">
	<select id="selectMemberForAuth" parameterType="String" resultType="best.gaia.vo.MemberVO">
		SELECT MEM_NO, MEM_ID, MEM_PASS, MEM_NICK, MEM_PIC_FILE_NAME
		FROM MEMBER
		WHERE MEM_ID = #{mem_id}  AND MEM_QUIT_DATE IS NULL
	</select>
	
	<select id="selectMemberDetailByNo" parameterType="String" resultType="best.gaia.vo.MemberVO">
		WITH MEMSTAT AS (
			SELECT COM_CODE_GRP, COM_CODE_NM, COM_CODE
			FROM COM_CODE
			WHERE COM_CODE_GRP = 'MS'
		)
		SELECT MEM_NO, MEM_ID, MEM_PASS, MEM_NICK, 
                MEM_TEL, MEM_PIC_FILE_NAME,
                MEM_SIGN_DATE, MEM_NM, MEM_BIO, MEM_WORKING_CITY,
                COM_CODE_NM AS MEM_STATUS
		FROM MEMBER
			INNER JOIN MEMSTAT ON(MEMBER.MEM_STATUS = MEMSTAT.COM_CODE)
		WHERE MEM_NO = ${mem_no}
	</select>
	
	<select id="memberStatusList" resultType="java.util.Map">
		SELECT COM_CODE, COM_CODE_NM 
		FROM COM_CODE
		WHERE COM_CODE_GRP = 'MS' 
		ORDER BY COM_CODE
	</select>
	
	<resultMap type="best.gaia.vo.MemberVO" id="memberMap" autoMapping="true">
		<id property="mem_no" column="MEMBER_NO"/>
		<collection property="projectList" ofType="best.gaia.vo.ProjectVO" javaType="java.util.List" autoMapping="true">
			<id property="proj_no" column="PROJECT_NO"/>
			<association property="projectManager" javaType="best.gaia.vo.MemberVO" autoMapping="false">
				<id property="mem_no" column="PROJ_MANAGER_NO"/>
				<result property="mem_id" column="PROJ_MANAGER_ID" />
			</association>
			<collection property="issueList" ofType="best.gaia.vo.IssueVO" javaType="java.util.Set" autoMapping="false">
				<id property="issue_sid" column="ISSUE_ID"/>
				<result property="issue_title" column="ISSUE_TITLE" />
				<result property="issue_status" column="ISSUE_STATUS" />
				<association property="label" javaType="best.gaia.vo.LabelVO" autoMapping="false">
					<result column="LABEL_NO" property="label_no"></result>
					<result column="LABEL_NM" property="label_nm"></result>
				</association>
				<collection property="assigneeList" ofType="best.gaia.vo.MemberVO" javaType="java.util.Set" autoMapping="false">
					<id property="mem_no" column="ASSIGNEE"/>
					<result property="mem_id" column="ASSIGNEE_ID"/>
				</collection>
				<collection property="historyList" ofType="best.gaia.vo.IssueHistoryVO" javaType="java.util.List" autoMapping="false">
					<id property="issue_his_no" column="ISSUE_HIS_NO"/>
					<result property="issue_his_date" column="ISSUE_HIS_DATE"/>
					<result property="issue_his_cont" column="ISSUE_HIS_CONT"/>
					<association property="historyWriter" javaType="best.gaia.vo.MemberVO" autoMapping="false"> 
						<id property="mem_no" column="FIXER_NO"/>
						<result property="mem_id" column="FIXER_ID"/>
						<result property="mem_nick" column="PROJ_USER_NICK"/>
					</association>
				</collection>
			</collection>
		</collection>
	</resultMap>
	
	<select id="selectMemberDetailProject_issue" parameterType="Integer" resultMap="memberMap">
        WITH PROJECTINFO AS (
		    SELECT
		        PROJ_TITLE, PROJECT.PROJ_NO, PROJ_USER_NICK, PROJ_MEM.MEM_NO,
		        MEM_ID AS PROJ_MANAGER_ID, PROJECT.MEM_NO AS PROJ_MANAGER_NO
		    FROM
		        PROJ_MEM
		        INNER JOIN PROJECT ON(PROJ_MEM.PROJ_NO = PROJECT.PROJ_NO)
		        INNER JOIN MEMBER ON(PROJECT.MEM_NO = MEMBER.MEM_NO)
		    ), 
		ISSUEINFO AS (
		    SELECT
		        ISSUE_ASSIGNEE.MEM_NO AS ASSIGNEE_NO, ISSUE.ISSUE_SID, ISSUE.ISSUE_NO, ISSUE.PROJ_NO,
		        ISSUE_HIS_NO, ISSUE_HISTORY.MEM_NO AS FIXER_NO, MEMBER.MEM_ID AS FIXER_ID, 
		        ISSUE_TITLE, ISSUE_HIS_CONT, ISSUE_HIS_DATE, ISSUE.LABEL_NO, LABEL.LABEL_NM
		    FROM
		        ISSUE_ASSIGNEE
		            INNER JOIN ISSUE ON (ISSUE_ASSIGNEE.ISSUE_SID = ISSUE.ISSUE_SID)
		            INNER JOIN ISSUE_HISTORY ON (ISSUE.ISSUE_SID = ISSUE_HISTORY.ISSUE_SID)
		            INNER JOIN MEMBER ON (ISSUE_HISTORY.MEM_NO = MEMBER.MEM_NO)
		            LEFT OUTER JOIN LABEL ON (ISSUE.LABEL_NO = LABEL.LABEL_NO)
		),
		ASSIGNEES AS (
		    SELECT A.ISSUE_SID AS ASSIGNEES_SID, C.MEM_NO AS ASSIGNEE, C.MEM_ID AS ASSIGNEE_ID
		    FROM ISSUE_ASSIGNEE A
		    INNER JOIN MEMBER C ON (A.MEM_NO = C.MEM_NO)
		), 
		MEMSTAT AS (
		    SELECT COM_CODE_GRP, COM_CODE_NM, COM_CODE
		    FROM COM_CODE
		    WHERE COM_CODE_GRP = 'MS'
		)
		SELECT 
		        MEMBER.MEM_NICK, MEMBER.MEM_ID, MEMBER.MEM_NO AS MEMBER_NO, MEMBER.MEM_BIO,
		        MEMBER.MEM_PIC_FILE_NAME, MEMSTAT.COM_CODE_NM AS MEM_STATUS,
		        PROJECTINFO.PROJ_NO AS PROJECT_NO, PROJ_TITLE, PROJ_MANAGER_NO, PROJ_MANAGER_ID, PROJ_USER_NICK,
		        ISSUE_SID AS ISSUE_ID, ISSUE_TITLE, FIXER_NO, FIXER_ID, ISSUE_HIS_CONT, ISSUE_HIS_DATE, ISSUE_HIS_NO,
		        LABEL_NO, LABEL_NM, ASSIGNEES.ASSIGNEE, ASSIGNEES.ASSIGNEE_ID
		FROM MEMBER
		        LEFT OUTER JOIN PROJECTINFO ON(MEMBER.MEM_NO = PROJECTINFO.MEM_NO)
		        LEFT OUTER JOIN ISSUEINFO ON(PROJECTINFO.PROJ_NO = ISSUEINFO.PROJ_NO AND MEMBER.MEM_NO = ISSUEINFO.ASSIGNEE_NO)
		        LEFT OUTER JOIN ASSIGNEES ON(ISSUEINFO.ISSUE_SID = ASSIGNEES.ASSIGNEES_SID)
		        INNER JOIN MEMSTAT ON(MEMBER.MEM_STATUS = MEMSTAT.COM_CODE)
		WHERE MEMBER.MEM_NO = #{mem_no}
		ORDER BY ISSUE_HIS_NO DESC	
	</select>
	
	<insert id="insertMember" parameterType="best.gaia.vo.MemberVO">
		<selectKey resultType="int" keyProperty="mem_no" order="BEFORE">
			SELECT MEM_SEQ.NEXTVAL
			FROM DUAL
		</selectKey>
		INSERT INTO MEMBER 
		(MEM_NO ,MEM_ID ,MEM_PASS ,MEM_NICK, MEM_SIGN_DATE, MEM_PIC_FILE_NAME)
		VALUES(#{mem_no},#{mem_id},#{mem_pass}, #{mem_nick}, SYSDATE, ${mem_no})
	</insert>
	
	<update id="updateMember" parameterType="best.gaia.vo.MemberVO">
		UPDATE MEMBER
			SET
		<trim prefixOverrides=",">
		 	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_nick)">
		    , MEM_NICK = #{mem_nick}
		    </if>
		 	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_tel)">
		    , MEM_TEL = #{mem_tel}
		    </if>
		 	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_nm)">
		    , MEM_NM = #{mem_nm}
		    </if>
		 	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_pass)">
		    , MEM_PASS = #{mem_pass}
		    </if>
		 	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_pic_file_name)">
		    , MEM_PIC_FILE_NAME = #{mem_pic_file_name}
		    </if>
		 	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_bio)">
		    , MEM_BIO = #{mem_bio}
		    </if>
		 	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_working_city)">
		    , MEM_WORKING_CITY = #{mem_working_city}
		    </if>
		    <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(mem_status)">
		    , MEM_STATUS = #{mem_status}
		    </if>
	    </trim>
	        WHERE MEM_NO = #{mem_no}
	</update>
	
	
	<update id="deleteMember" parameterType="Integer">
<!-- 		 UPDATE MEMBER -->
<!-- 		 	SET MEM_QUIT_DATE = SYSDATE -->
<!-- 	        WHERE MEM_NO = #{mem_no} -->
	</update>
	
	<select id="selectMemberID" parameterType="String" resultType="Integer">
	select count(*)
	from member
	where mem_id = #{mem_id}
	</select>
	
	<resultMap type="best.gaia.vo.ProjMemVO" id="projMemMap" autoMapping="true">
		<id property="mem_no" column="MEM_NO"/>
		<id property="proj_no" column="PROJ_NO"/>
		<association property="member" javaType="best.gaia.vo.MemberVO" autoMapping="true">
			<id property="mem_no" column="MEM_NO"/>
		</association>
	</resultMap>
	
	<select id="selectProjectMembers" parameterType="map" resultMap="projMemMap">
		select member.mem_id, member.mem_nick, member.mem_nm, member.mem_no, member.mem_pic_file_name
        ,mem_role.mem_role_nm, mem_role.mem_role_no
        , proj_mem.proj_join_date, proj_mem.proj_drop_date
        , proj_mem.proj_user_nick
		from proj_mem
		    inner join mem_role on (proj_mem.mem_role_no = mem_role.mem_role_no)
		    inner join member on (proj_mem.mem_no = member.mem_no)
		where proj_mem.proj_no = #{proj_no}
		order by proj_mem.mem_role_no, proj_mem.proj_join_date
	</select>
	
	<select id="getMemNoFromMemId" parameterType="string" resultType="int">
		SELECT MEM_NO 
		FROM MEMBER
		WHERE MEM_ID = #{mem_id}
	</select>
	
	<select id="getMemIdFromMemNo" parameterType="int" resultType="string">
		SELECT MEM_ID 
		FROM MEMBER
		WHERE MEM_NO = #{mem_no}
	</select>
	
	<select id="getMemNickFromMemNo" parameterType="int" resultType="string">
		SELECT MEM_NICK
		FROM MEMBER
		WHERE MEM_NO = #{mem_no}
	</select>
	
	<select id="selectmemberForpersonalProfile" parameterType="int" resultType="map">
		with issuecnt as(
		    select count(*)
		    from issue
		    where mem_no = #{mem_no}
		)
		,milestonecnt as(
		    select count(*)
		    from milestone
		    where mem_no = #{mem_no}
		)
		,newscnt as(
		    select count(*)
		    from news
		    where mem_no = #{mem_no}
		)
		,newscomcnt as(
		    select count(*)
		    from news_comment
		    where mem_no = #{mem_no}
		)
		,issueassigneecnt as(
		    select count(*)
		    from issue_assignee
		    where mem_no = #{mem_no}
		)
		,memchatcnt as(
		    select count(*)
		    from mem_chat
		    where mem_no = #{mem_no}
		)
		select member.mem_id, member.mem_nick, member.mem_tel, member.mem_pic_file_name
		        , member.mem_sign_date, member.mem_quit_date, member.mem_nm, member.mem_bio, member.mem_working_city, member.mem_status
		        , proj_join_date, proj_drop_date, proj_user_nick
		        , manager.mem_id as proj_managerid, member.mem_pic_file_name as managerpic
		        , proj_title, proj_cont, proj_start_date, proj_est_end_date, proj_status
		        , (select count(*) from proj_mem where proj_no = project.proj_no) as projectmemcnount
		        , (select * from issuecnt) as issuecnt
		        , (select * from newscnt) as newscnt
		        , (select * from newscomcnt) as newscomcnt
		        , (select * from milestonecnt) as milestonecnt
		        , (select * from issueassigneecnt) as issueassigneecnt
		        , (select * from memchatcnt) as memchatcnt
		from member
		    left outer join proj_mem on (member.mem_no = proj_mem.mem_no)
		    left outer join project on (proj_mem.proj_no = project.proj_no)
		    left outer join member manager on (project.mem_no = manager.mem_no)
		where member.mem_no = #{mem_no}
	</select>
	
	
</mapper>